<?xml version="1.0" encoding="UTF-8"?>
<chapter
        xml:id="tests"
        xmlns="http://docbook.org/ns/docbook" version="5.1" xml:lang="hu"
>
    <title>Tesztelés</title>
    <sect1>
        <title>A tesztelés szerepe a fejlesztési folyamatban</title>
        <para>Napjainban a programokkal szemben támasztott követelmények megnőttek. Ezek a követelmények lehetnek
            funkcionálisak és nem funkcionálisak is. Ahhoz, hogy ezeket a követelményeket teljesíteni tudják a
            programok, megfelelő tesztelésre van szükség. Egy játék program esetén, mint a snapszer kártyajáték, felveti
            a tesztelés szükségességét. Ezek a tesztelések támogathatják a fejlesztés menetetét, javíthatják a kód
            minőségét is, de legfőbb céljuk az előforduló hibák csökkentése.
        </para>
    </sect1>

    <sect1>
        <title>Egységtesztelés</title>
        <para>Az egységteszt olyan tesztelési szint, mely a program legkisebb, önállóan működő részét teszteli.
            A fejlesztők első sorban egységtesztek segítségével szokták tesztelni a programot. Az
            egységtesztek készülhetnek a program elkészülése után, párhuzamosan a programmal, vagy akár a fejlesztés
            megkezdése előtt is elkészülhetnek. Az agilis szoftverfejlesztési módszertanok közül az XP (Extreme
            Programming) szorgalmazza a TDD (Test Driven Development) alkalmazását.
        </para>
        <para>A TDD egy automatizált egységtesztelési technika, aminek a segítségével egy olyan széleskörű
            tesztkészletre tehetünk szert, ami bárhol és bármikor visszajelzést adhat arról, hogy a szoftver továbbra is
            működik. A teszt vezérelt fejlesztés mottója: "Red, Green, Refactor".
        </para>
        <itemizedlist>
            <listitem>
                <para>Red: csinálj egy tesztet, ami elbukik.</para>
            </listitem>
            <listitem>
                <para>Green: kódolj addig, míg a teszt sikeres nem lesz.</para>
            </listitem>
            <listitem>
                <para>Refactor: optimalizáld, szervezd át úgy a kódot, hogy a teszten továbbra is átmenjen.</para>
            </listitem>
        </itemizedlist>
        <para>Ezeket a lépéseket ismételd addig, míg nem teljesül minden funkcionális is nem funkcionális követelmény.</para>
        <para>
            <emphasis role="bold">Az egységtesztek legfőbb jellemzői:</emphasis>
        </para>
        <itemizedlist>
            <listitem>
                <para>Gyors futás: Ha a tesztek lassan futnak le, akkor nem lehet őket gyakran ismételni.</para>
            </listitem>
            <listitem>
                <para>Céljuk pontosan egy programegység tesztelése: Ha a tesztelendő programegységnek függőségei vannak,
                    akkor a függőségek működését az egységteszt részeként kell szimulálni.
                </para>
            </listitem>
            <listitem>
                <para>Függetlenség: Az egységteszteknek egymástól függetlennek kell lenniük. Egy teszt végrehajtása nem
                    függhet egy másik teszt végrehajtásától.
                </para>
            </listitem>
            <listitem>
                <para>Ismételt végrehajtás: Az egységteszteknek megismételhetőnek kell lenniük. Az egységteszek ereje
                    a regressziós végrehajtásban rejlik.
                </para>
            </listitem>
            <listitem>
                <para>Futtató környezettől való függetlenség: Ezen kritérium lehetővé teszi, hogy a tesztek könnyen
                    végrehajthatók legyenek bárhol, bármikor. Ilyen függőség lehet például egy adatbázis. Nem alapozhat
                    arra
                    egy teszteset, hogy az adatbázis mindig rendelkezésre fog állni.
                </para>
            </listitem>
            <listitem>
                <para>Mellekhatástól mentesek: Nem módosítják a futtató környezetet, hogy az hatással legyen más
                    tesztek végrehajtására.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            <emphasis role="bold">Tesztelő környezet kialakítása</emphasis>
        </para>
        <para>A játék program teszteléséhez a JUnit tesztelő keretrendszert használtam. Maven projekt esetén, a JUnit
            könnyen használatba vehető. Először is a projekt függőségek közzé fel kell venni a következő függőséget:
        </para>
        <programlisting language="xml"><![CDATA[<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.10</version>
    <scope>test</scope>
</dependency>]]></programlisting>
        <para>Ezen kívül még szükség van a mockito keretrendszerre, melyet a következő módon lehet megadni:</para>
        <programlisting language="xml"><![CDATA[<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-all</artifactId>
    <version>1.10.19</version>
</dependency>]]></programlisting>
        <para>Ha ez kész van, akkor létre kell hozni a megfelelő könyvtár struktúrát. A következő struktúrát kell
            követni: src/test/java. Ebben a könyvtárban lehet elhelyezni a kívánt teszt osztályokat, és a további
            könyvtárakat struktúrálás céljából.
        </para>
        <para>
            <emphasis role="bold">Példa operátor tesztelésére</emphasis>
        </para>
        <para>A következő példákban megvizsgáljuk, hogy miként lehet teszteket végrehajtani a Say20Operator osztályon.
            A Say20Operator feladata a 20 bemondását kezelni. Mint minden operátor, a vizsgált operátorunk is függ a
            játék állásától. Az egység teszteket izoláltan kell elvégezni, más osztályok és a futtató környezet nem
            lehetnek hatással a tesztekre. Az egység tesztjeinket úgy tudjuk végrehajtani a tesztelendő osztályon, hogy
            a függőségeit helyettesítjük úgynevezett ál implementációkkal. A tesztek végrehajtásához olyan játék
            állásokat kell kialakítanunk, amely jó lefedettséget biztosít számunkra. Először is létre kell hoznunk 2
            darab kártya listát. Az egyik lista tartalmazza a 20 bemondásához szükséges lapokat, viszont a másik nem.
            Ezek a listákat a konstruktorban példányosítjuk és final módosítóval látjuk el őket, hogy a későbbiekben
            ezeket ne lehessen módosítani.
        </para>
        <programlisting language="java"><![CDATA[private final ObservableList<ICard> deckContains20;
private final ObservableList<ICard> deckNotContains20;

public Say20OperatorTest() {
    deckContains20 = FXCollections.observableArrayList(
        new HungarianCard(
            HungarianCardRank.KIRALY, HungarianCardSuit.PIROS),
        new HungarianCard(
            HungarianCardRank.FELSO, HungarianCardSuit.PIROS),
        new HungarianCard(
            HungarianCardRank.ASZ, HungarianCardSuit.ZOLD),
        new HungarianCard(
            HungarianCardRank.TIZ, HungarianCardSuit.MAKK),
        new HungarianCard(
            HungarianCardRank.ALSO, HungarianCardSuit.TOK));

    deckNotContains20 = FXCollections.observableArrayList(
        new HungarianCard(
            HungarianCardRank.KIRALY, HungarianCardSuit.PIROS),
        new HungarianCard(
            HungarianCardRank.FELSO, HungarianCardSuit.ZOLD),
        new HungarianCard(
            HungarianCardRank.ASZ, HungarianCardSuit.ZOLD),
        new HungarianCard(
            HungarianCardRank.TIZ, HungarianCardSuit.MAKK),
        new HungarianCard(
            HungarianCardRank.ALSO, HungarianCardSuit.TOK));
}]]></programlisting>
        <para>Az alábbi példában, a setUp metódusban példányosításra kerül 3 db mock objektum. Ezen objektumok teszik
            lehetővé, hogy a tesztünk ne függjön más osztályoktól. Előre megadjuk az objektumok viselkedését, hogy
            bizonyos paraméterek esetén az egyes metódus hívások milyen értékeket szolgáltassanak. Az applicableTest
            metódusban egy assert metódus szerepel, ami annyit jelent ki, hogy a jelenlegi állapotban a játékosnak
            lehetősége van a 20 bemondására. A játék jelenlegi állapotát a mock objektumok szolgáltatják, így
            a teszt metódus csak a Say20Operator működésére fókuszál.
        </para>
        <programlisting language="java"><![CDATA[@Before
public void setUp() {
    gameMatchMock = Mockito.mock(GameMatch.class);
    currentPlayer = Mockito.mock(Player.class);
    nextPlayer = Mockito.mock(Player.class);
}

@Test
public void applicableTest() {
    when(currentPlayer.getCards()).thenReturn(deckContains20);
    when(gameMatchMock.getCurrentPlayer()).thenReturn(currentPlayer);
    Say20Operator say20Operator = new Say20Operator(currentPlayer);
    assertTrue(say20Operator.isApplicable(gameMatchMock));
}]]></programlisting>
        <para>A következő példánkban egy ellenkező esetet vizsgálunk meg, azt teszteljük, hogy egy operátor a megadott
            játék állásban nem alkalmazható. A notApplicableTest metódus azt az esetet vizsgálja meg, amikor a soron
            következő játékos a hívó, de nincsenek a kezében a megfelelő lapok, hogy jogosult legyen a 20
            bemondására. Az assertFalse metódus abban az esetben bukik el, ha a paraméterben megadott kifejezés logikai
            értéke igaz.
        </para>
        <programlisting language="java"><![CDATA[@Test
public void notApplicableTest() {
    when(currentPlayer.getCards()).thenReturn(deckNotContains20);
    when(gameMatchMock.getCurrentPlayer()).thenReturn(currentPlayer);
    Say20Operator say20Operator = new Say20Operator(currentPlayer);
    assertFalse(say20Operator.isApplicable(gameMatchMock));
}]]></programlisting>
        <para>A mockito keretrendszer lehetővé teszi számunkra, hogy különböző viselkedéseket teszteljünk:</para>
        <itemizedlist>
            <listitem>
                <para>egy mock objektum metódusai meghívódtak-e bizonyos paraméterekkel</para>
            </listitem>
            <listitem>
                <para>egy mock objektum metódusai hányszor kerültek meghívásra</para>
            </listitem>
            <listitem>
                <para>bizonyos kivételek kiváltódtak-e</para>
            </listitem>
        </itemizedlist>
        <para>A következő példában a 40 bemondását reprezentáló operátort teszteljük, abból az aspektusból, hogy az
            operátor alkalmazása meghívta-e az általunk megadott metódusokat.
        </para>
        <programlisting language="java"><![CDATA[@Test
public void applyTest() {
    when(currentPlayer.getCards()).thenReturn(deckContains40);
    when(gameMatchMock.getCurrentPlayer()).thenReturn(currentPlayer);
    Say40Operator say40Operator = new Say40Operator(currentPlayer);
    say40Operator.apply(gameMatchMock);
    verify(currentPlayer).setSaid40(eq(true));
    verify(currentPlayer).addScore(eq(40));
}]]></programlisting>
        <para>A verify metódus segítségével teszteljük azt a viselkedést, miszerint a jelenlegi játékos (aki alkalmazta
            a 40 bemondását) setSaid40 metódusa a logikai igaz (true) paraméterrel, illetve az addScore
            metódus a 40 paraméterrel lett meghívva.
        </para>
    </sect1>

    <sect1>
        <title>Jelentések készítése</title>
        <para>Különböző maven bővítményekkel jelentéseket tudunk készíteni a teszt eredményekről. Ezek a jelentések
            különböző információkat szolgáltatnak a tesztekről:
            <itemizedlist>
                <listitem>
                    <para>Sikeres/sikertelen tesztek száma, százalékos aránya</para>
                </listitem>
                <listitem>
                    <para>Tesztek futási ideje</para>
                </listitem>
                <listitem>
                    <para>Tesztlefedettség: sorokra és elágazásokra értelmezve</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>A maven-surefire-report-plugin bővítmény segítségével könnyen tudunk jelentéseket készíteni a tesztek
            sikerességéről, sikertelenségéről. Ha a bővítményt felvesszük a reporting elemben, akkor a site maven
            életciklus során automatikusan generálásra kerül egy jelentés, amit böngészőben meg tudunk tekinteni.
        </para>
        <para>Példa jelentésre:</para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/surefirereport.png" width="100%" scalefit="1"/>
            </imageobject>
        </mediaobject>
        <para>Az előző bővítményt a cobertura-maven-plugin remekül kiegészíti. A cobertura segítségével áttekintést
            kapunk a tesztlefedettségre vonatkozóan. Százalékos formában jeleníti meg, hogy az adott osztály utasításait
            és elágazásait milyen mértékben érintették a tesztek a futás során.
        </para>
        <para>Példa jelentésre:</para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/coberturareport.png" width="100%" scalefit="1"/>
            </imageobject>
        </mediaobject>
    </sect1>

</chapter>