<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="implementation"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.1" xml:lang="hu">
    <title>Implementáció</title>
    <sect1>
        <title>Operátorok megvalósítása</title>
        <para>Az operátorok megvalósítását végző osztályok a model csomagban és azon belül is az operators
            csomagban kaptak helyet. Minden operátor osztály az absztrakt operator ősből van származtatva. A
            származtatott osztálynak tudnia kell, hogy melyik játékos alkalmazta vagy próbálta alkalmazni az adott
            operátort, az operator osztály egyetlen konstruktort tartalmaz, ami egy Player típusú objektumot vár. Ezen
            felül két absztrakt metódust tartalmaz, melyet a származtatott osztályok implementálnak a játékszabályoknak
            megfelelően.
            <programlisting language="java"><![CDATA[abstract public boolean isApplicable(GameMatch game);

abstract protected void onApply(GameMatch game);]]></programlisting>
            Az isApplicable metódus célja az alkalmazási előfeltételek megvalósítása, míg az onApply metódus az operátor
            hatását valósítja meg. Ezen absztrakt metódusokon kívül még lehetőség van feliratkozni az operátorok
            alkalmazására. Az eseményvezérelt megközelítés lehetővé teszi, hogy egy a megjelenítésért felelős osztály
            a játék során értesüljön, hogy melyik operátort alkalmazták sikerrel.
        </para>
        <para>Példa operátor megvalósítására: Mond<subscript>40</subscript> operátor
        </para>
        <para>Alkalmazási előfeltételek:</para>
        <programlisting><![CDATA[@Override
public boolean isApplicable(GameMatch game) {
    return player.equals(game.getCurrentPlayer()) &&
            !player.isSaid40() && !player.isSaid20() &&
            player.getCards().stream().anyMatch(
                card -> card.getSuit() == game.getTrumpSuit() &&
                        card.getRank() == HungarianCardRank.FELSO) &&
            player.getCards().stream().anyMatch(
                card -> card.getSuit() == game.getTrumpSuit() &&
                        card.getRank() == HungarianCardRank.KIRALY);
}]]></programlisting>
        <para>Operátor hatása:</para>
        <programlisting><![CDATA[@Override
public void onApply(GameMatch game) {
    player.addScore(40);
    player.setSaid40(true);
}]]></programlisting>
        <para>Egy másik operátor megvalósítása: Aducsere</para>
        <para>Alkalmazási előfeltételek:</para>
        <programlisting><![CDATA[@Override
public boolean isApplicable(GameMatch game) {
    return !(!player.equals(game.getCurrentPlayer()) ||
    game.getDeck().size() < 4 || game.isCover()) &&
    player.getCards().stream().anyMatch(iCard -> iCard.getSuit() ==
        game.getTrumpCard().getSuit() &&
        iCard.getRank() == HungarianCardRank.ALSO);
}]]></programlisting>
        <para>Operátor hatása:</para>
        <programlisting><![CDATA[@Override
public void onApply(GameMatch game) {
    oldTrumpCard = game.getTrumpCard();
    game.getDeck().cards.remove(oldTrumpCard);
    newTrumpCard = player.getCards().stream().filter(iCard ->
    iCard.getSuit() == game.getTrumpCard().getSuit() &&
    iCard.getRank() == HungarianCardRank.ALSO).findFirst().get();
    game.trumpCardProperty().setValue(newTrumpCard);
    player.getCards().set(player.getCards().
        indexOf(newTrumpCard), oldTrumpCard);
}]]></programlisting>
    </sect1>

    <sect1>
        <title>Egy játszma párhuzamosítása</title>
        <para>A program két szálon fut, az egyik szál a grafikus megjelenítésért, a másik szál pedig a játék logikájának
            a megvalósításáért felel. A párhuzamos programozásnak köszönhetően egy számítás igényes művelet esetén, amit
            például egy számítógép játékos végezhet, a felhasználói felület továbbra is képes feldolgozni a felhasználói
            interakciókat, mivel az egy külön szálon fut.
        </para>
        <para>Egy játék lebonyolítását a SnapszerTwoPlayerGame osztály végzi, ami a Task&lt;Void&gt; absztrakt
            osztályból származik, aminek van egy call absztrakt metódusa, amit implementálni kell. A call metódusban
            kerül elindításra a játszma és itt inicializálódik a talon is. A játszmát követően a nyert pontokat
            hozzáadja a nyertes játékos pontjaihoz és ha még nincs vége a játéknak, akkor egy új játszmát indít el.
        </para>
        <para>A játszma megvalósítását a GameMatch osztály végzi. Ez az osztály felel:</para>
        <itemizedlist>
            <listitem>
                <para>A játszma elindításáért, a játékosok véletlenszerű kezdéséért.</para>
            </listitem>
            <listitem>
                <para>A végállás figyeléséért.</para>
            </listitem>
            <listitem>
                <para>Az operátorok validálásáért, alkalmazásáért.</para>
            </listitem>
            <listitem>
                <para>A játék körök kezeléséért.</para>
            </listitem>
            <listitem>
                <para>A lapok húzásáért.</para>
            </listitem>
            <listitem>
                <para>A nyertes játékos és a nyert pontok meghatározásáért.</para>
            </listitem>
        </itemizedlist>
        <para>A GameMatch biztosítja, hogy a játékosok csak azokról az információkról tudjanak, amiket a szabályok
            egyébként is megengednek, ehhez a GameState segéd osztályt használja fel. Ennek a megoldásnak köszönhetően
            a számítógép játékosok nem ismerik a talon tartalmát és nincs információjuk, hogy az ellenfél játékosnál
            milyen kártyalapok találhatóak.
        </para>
        <para>A játszma fő részét a következő kódcsipet valósítja meg:</para>
        <programlisting><![CDATA[public void play() {
    initGame();
    while (true) {
        if (isMatchOver())
            return;
        for (Player player :
            getPlayers()) {
            while (true) {
                Operator op = player.chooseOperator(
                    getAllApplicableOperators(player),
                    new GameState(
                        getTrumpCard(),
                        new ArrayList<>(getCardsOnTable()),
                        new ArrayList<>(getPlayedCards())));
                if (op.isApplicable(this)) {
                    op.apply(this);
                    logger.trace(String.format(
                        "The %s player apply: %s",
                        player.getName(),
                        op.toString()));
                    if (op instanceof PlayCardOperator) {
                        break;
                    }
                    if (op instanceof SayEndOperator) {
                        return;
                    }
                }
            }
        }
        beatPhase();
        drawPhase(1);
    }
}]]></programlisting>
        <para>A játszma addig tart, amíg a végállapot feltételei nem teljesülnek. A játékosok egymás után felváltva
            következnek. Ha a játékos hívott egy lapot, akkor a következő játékos következik, illetve ha azt mondta
            sikeresen, hogy "elég", akkor vége van a játszmának. A kör végén meghatározásra kerül, hogy ki üti el a
            lapokat, majd lapot húznak a játékosok.
        </para>
    </sect1>

    <sect1>
        <title>Számítógép stratégiák</title>
        <para>A számítógép játékosokat megvalósító osztályok az absztrakt Computer osztályból származnak, ami pedig
            az absztrakt Player osztályból származik.
        </para>
        <para>A legegyszerűbb számítógép játékos megvalósítás:
            <emphasis role="bold">Random computer</emphasis>
            (A szabályos lépések közül véletlenszerűen választ egyet).
        </para>
        <programlisting><![CDATA[@Override
public Operator chooseOperator(List<Operator> operators, GameState gameState) {
    Random randomGenerator = new Random();
    int index = randomGenerator.nextInt(operators.size());
    return operators.get(index);
}]]></programlisting>
        <para>Az előző stratégia továbbfejlesztése a
            <emphasis role="bold">Beginner computer</emphasis>, aki már valamilyen "jóság" alapján választja ki az
            alkalmazandó operátort. Az őt megvalósító kódcsipet:
        </para>
        <programlisting><![CDATA[private Integer getGoodness(Operator op, GameState gameState) {
    if (op instanceof SayEndOperator)
        return Integer.MAX_VALUE;
    if (op instanceof SwapTrumpOperator)
        return Integer.MAX_VALUE - 1;
    if (op instanceof Say40Operator)
        return 40;
    if (op instanceof Say20Operator)
        return 20;
    if (op instanceof PlayCardOperator) {
        PlayCardOperator playCardOperator = (PlayCardOperator) op;
        if (!gameState.tableIsEmpty()) {
            if (gameState.getCardsOnTable().get(0).
                compareTo(playCardOperator.getCard()) < 0) {
                    return playCardOperator.getCard().getScore();
            } else {
                return -1 * playCardOperator.getCard().getScore();
            }
        } else {
            return playCardOperator.getCard().getScore();
        }
    }
    return Integer.MIN_VALUE;
}]]></programlisting>
        <para>A Beginner computer stratégia arra törekszik, hogy a lehető legtöbb pontot zsebelje be az adott körben.
        </para>
        <para>A következő stratégia az
            <emphasis role="bold">Advanced Computer</emphasis>, amely már azt is számításba veszi, hogy mely lapok
            nincsenek már játékban és próbál olyan lapot hívni, amitől az adott színben nincs "magasabb" lap. A vártnak
            megfelelően ezen stratágia eredményesebben játszik, mint az előzőek.
        </para>
        <para>Az érdemi kódrészlet, aminek segítségével eldönti, hogy az adott laptól, az adott színben van-e "magasabb"
            lap a játékban:
        </para>
        <programlisting><![CDATA[protected boolean higherCardInGame(HungarianCard card,
        List<HungarianCard> knownCards) {
    return !knownCards.containsAll(higherCards(card));
}

protected List<HungarianCard> higherCards(HungarianCard card) {
    return SnapszerDeck.getSampleDeck().cards.stream().filter(
        otherCard -> card.getSuit() == otherCard.getSuit() &&
        otherCard.getRank().compareTo(card.getRank()) > 0).
            collect(Collectors.toList());
}]]></programlisting>
        <para>Az
            <emphasis role="bold">Expert Computer</emphasis>
            az utolsó a vizsgált stratégiák sorában. Ezen
            stratégia elődeihez képest eltér, ő egy operátor "jóságát" az alapján határozza meg, hogy az alkalmazását
            követően mennyire fog közelebb kerülni ahhoz, hogy nyerjen. Ezen kívül még a Snapszer operátort is
            alkalmazza, ha nagy esély van rá, hogy ezt követően megnyeri a meccset. Ezen játékos implementációját külön
            már nem tárgyaljuk, implementációja megtalálható a ComputerExpert osztályban.
        </para>
    </sect1>


    <sect1>
        <title>Stratégiák összehasonlítása</title>
        <para>
            A program biztosít egy olyan játékmódot, ahol egymás ellen játszhatnak a számítógép játékosok. Ebben a
            játékmódban grafikus megjelenítés nélkül zajlanak a játszmák. Az eredményről, illetve a játék folyamatáról
            egy log állomány keletkezik. Ezen állomány többek között az alábbi információkat tartalmazza:
        </para>
        <itemizedlist>
            <listitem>
                <para>A játszma kezdetét/végét</para>
            </listitem>
            <listitem>
                <para>Melyik játékos melyik operátort/operátorokat alkalmazta</para>
            </listitem>
            <listitem>
                <para>Az adott játszmát ki nyerte és hány pontot nyert</para>
            </listitem>
            <listitem>
                <para>Ki nyerte a játékot</para>
            </listitem>
            <listitem>
                <para>Végezetül egy összefoglalás, hogy x játékból hány játékot nyert az egyik, illetve másik játékos
                </para>
            </listitem>
        </itemizedlist>
        <para>Egy példa kimenet részlete:
            <programlisting><![CDATA[21:01:01 INFO SnapszerTwoPlayerGame The match is starting...
21:01:01 TRACE GameMatch The Computer (Random operator) player apply: SnapszerOperator
21:01:01 TRACE GameMatch The Computer (Random operator) player apply: PlayCardOperator
21:01:01 TRACE GameMatch The Computer (Expert) player apply: PlayCardOperator
21:01:01 INFO SnapszerTwoPlayerGame The match has been finished
21:01:01 INFO SnapszerTwoPlayerGame The Computer (Expert) has won the match
21:01:01 INFO SnapszerTwoPlayerGame Won points: 6
21:01:01 INFO SnapszerTwoPlayerGame --------------------------------------------------------------
21:01:01 INFO SnapszerTwoPlayerGame The Computer (Expert) has won the game
21:01:01 INFO SnapszerTwoPlayerGame --------------------------------------------------------------
21:01:01 INFO ConsoleGame The Computer (Random operator) has won 0 game.
21:01:01 INFO ConsoleGame The Computer (Expert) has won 1000 game.]]></programlisting>
        </para>
        <para>A következő táblázat statisztikai információkat szolgáltat arról, hogy 1000 játszmából melyik stratégia
            hányszor nyert.
        </para>
        <table frame='all'>
            <title>Statisztika</title>
            <tgroup cols="5">
                <colspec colname='c1' colwidth="1*"/>
                <colspec colname='c2' colwidth="1*"/>
                <colspec colname='c3' colwidth="1*"/>
                <colspec colname='c4' colwidth="1*"/>
                <colspec colname='c5' colwidth="1*"/>
                <tbody>
                    <row>
                        <entry></entry>
                        <entry>Random</entry>
                        <entry>Beginner</entry>
                        <entry>Advanced</entry>
                        <entry>Expert</entry>
                    </row>
                    <row>
                        <entry>Random</entry>
                        <entry>-</entry>
                        <entry>2/998</entry>
                        <entry>3/997</entry>
                        <entry>0/1000</entry>
                    </row>
                    <row>
                        <entry>Beginner</entry>
                        <entry>998/2</entry>
                        <entry>-</entry>
                        <entry>395/605</entry>
                        <entry>405/595</entry>
                    </row>
                    <row>
                        <entry>Advanced</entry>
                        <entry>997/3</entry>
                        <entry>605/395</entry>
                        <entry>-</entry>
                        <entry>443/557</entry>
                    </row>
                    <row>
                        <entry>Expert</entry>
                        <entry>1000/0</entry>
                        <entry>595/405</entry>
                        <entry>557/443</entry>
                        <entry>-</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>A statisztika egy kivételtől eltekintve a várakozásnak megfelelő eredményeket szolgáltatja. Az Advanced
            computer stratégia, ha nem is sokkal, de sikeresebben játszott a Beginner computer ellen, mint az erősebb
            stratégiának vélt Expert computer. Ebből a nem várt furcsa eredményből is az látszik, hogy milyen nagy
            szerepe van a véletlennek a játék során.
        </para>
    </sect1>
</chapter>